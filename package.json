{
  "name": "@stolostron/console",
  "version": "0.0.1",
  "license": "SEE LICENSE IN LICENSE",
  "private": "true",
  "scripts": {
    "postinstall": "concurrently npm:ci:* -c green,blue",
    "ci:frontend": "cd frontend && npm ci",
    "ci:backend": "cd backend && npm ci",
    "start": "concurrently npm:start:backend npm:start:frontend -c green,blue",
    "start:hot": "concurrently npm:start:backend npm:start:frontend:hot -c green,blue",
    "launch": "concurrently npm:start:backend npm:start:frontend:launch -c green,blue",
    "start:backend": "cd backend && npm start",
    "start:frontend": "cd frontend && npm start",
    "start:frontend:hot": "cd frontend && npm run start:hot",
    "start:frontend:launch": "cd frontend && npm run launch",
    "plugins": "concurrently npm:start:backend npm:serve:plugins npm:ocp-console -n backend,frontend,console -c green,blue,magenta",
    "plugins-dev": "concurrently npm:start:backend npm:serve:plugins -n backend,frontend -c green,blue",
    "ocp-console": "./start-ocp-console.sh",
    "serve:plugins": "cd frontend && npm run serve:plugins",
    "check": "concurrently --kill-others-on-fail npm:copyright:check \"npm:check:*(!fix)\" -c green,blue,magenta",
    "check:backend": "cd backend && npm run check",
    "check:frontend": "cd frontend && npm run check",
    "check:fix": "concurrently --kill-others-on-fail npm:copyright:fix npm:check:fix:* -c green,blue,magenta",
    "check:fix:backend": "cd backend && npm run check:fix",
    "check:fix:frontend": "cd frontend && npm run check:fix",
    "lint-staged": "npx lint-staged --no-stash",
    "lint": "concurrently --kill-others-on-fail \"npm:lint:*(!fix)\" -c green,blue",
    "lint:backend": "cd backend && npm run lint",
    "lint:frontend": "cd frontend && npm run lint",
    "lint:fix": "concurrently --kill-others-on-fail npm:lint:fix:* -c green,blue",
    "lint:fix:backend": "cd backend && npm run lint:fix",
    "lint:fix:frontend": "cd frontend && npm run lint:fix",
    "test": "concurrently -P --kill-others-on-fail \"npm:test:* -- {@}\" -c green,blue --",
    "test:backend": "cd backend && npm test --",
    "test:frontend": "cd frontend && npm test --",
    "i18n": "concurrently --kill-others-on-fail \"npm:i18n:*(!fix)\" -c green,blue,magenta",
    "i18n:frontend": "cd frontend && npm run i18n --",
    "i18n:fix": "concurrently --kill-others-on-fail npm:i18n:fix:* -c green,blue,magenta",
    "i18n:fix:frontend": "cd frontend && npm run i18n:fix --",
    "build": "concurrently npm:build:* -c green,blue,magenta",
    "build:backend": "cd backend && npm run build",
    "build:frontend": "cd frontend && npm run build",
    "build:plugins": "cd frontend && npm run build:plugins",
    "clean": "concurrently npm:clean:* -c green,blue",
    "clean:backend": "cd backend && npm run clean",
    "clean:frontend": "cd frontend && npm run clean",
    "update": "npx npm-check-updates --upgrade && npm install && npm run backend:update && npm run frontend:update",
    "backend:update": "cd backend && npm run update",
    "frontend:update": "cd frontend && npm run update",
    "copyright:check": "ts-node --skip-project scripts/copyright-check",
    "copyright:fix": "ts-node --skip-project scripts/copyright-fix",
    "docker:build": "docker build --file Dockerfile.prow --tag console .",
    "docker:build:mce": "docker build --file Dockerfile.mce.prow --tag console-mce .",
    "docker:run": "npm run docker:build && docker run --rm --name console -p 3000:3000 -e PORT=3000 -v $PWD/backend/certs:/app/certs -v $PWD/backend/config:/app/config --env-file=backend/.env console | ./backend/node_modules/.bin/pino-zen -i time && docker rm -f console",
    "docker:deploy": "npm run docker:build && docker tag console quay.io/$USER/console:latest && docker push quay.io/$USER/console:latest && ./scripts/patch-deployment.sh latest quay.io/$USER/console",
    "podman:build": "podman build --file Dockerfile.prow --tag console .",
    "podman:build:mce": "podman build --file Dockerfile.mce.prow --tag console-mce .",
    "podman:run": "npm run podman:build && podman run --rm --name console -p 3000:3000 -e PORT=3000 -v $PWD/backend/certs:/app/certs -v $PWD/backend/config:/app/config --env-file=backend/.env console | ./backend/node_modules/.bin/pino-zen -i time && podman rm -f console",
    "podman:deploy": "npm run podman:build && podman tag console quay.io/$USER/console:latest && podman push quay.io/$USER/console:latest && ./scripts/patch-deployment.sh latest quay.io/$USER/console",
    "podman:deploy:mce": "npm run podman:build:mce && podman tag console-mce quay.io/$USER/console-mce:latest && podman push quay.io/$USER/console-mce:latest && ./scripts/patch-deployment.sh latest quay.io/$USER/console-mce",
    "setup": "./setup.sh",
    "prepare": "husky install"
  },
  "devDependencies": {
    "@types/node": "14.18.22",
    "@types/semver": "^7.3.13",
    "concurrently": "7.2.2",
    "husky": "7.0.4",
    "lint-staged": "^13.0.3",
    "prettier": "2.7.1",
    "ts-node": "10.9.1",
    "typescript": "4.7.4"
  },
  "prettier": {
    "printWidth": 120,
    "tabWidth": 2,
    "semi": false,
    "singleQuote": true
  }
}
