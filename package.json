{
    "name": "@stolostron/console",
    "version": "0.0.1",
    "license": "SEE LICENSE IN LICENSE",
    "private": "true",
    "scripts": {
        "postinstall": "concurrently npm:ci:* -c green,blue",
        "ci:frontend": "cd frontend && npm ci",
        "ci:backend": "cd backend && npm ci",
        "frontend:reinstall": "cd frontend && npm reinstall",
        "backend:reinstall": "cd backend && npm reinstall",
        "start": "concurrently npm:frontend npm:backend -n frontend,backend -c green,blue",
        "plugins": "concurrently npm:backend npm:serve:plugins -c green,blue,magenta",
        "backend": "cd backend && npm start",
        "frontend": "cd frontend && npm start",
        "serve:plugins": "cd frontend && npm run serve:plugins",
        "test": "concurrently --kill-others-on-fail npm:frontend:test npm:backend:test npm:copyright:check -n frontend,backend -c green,blue",
        "frontend:test": "cd frontend && npm test",
        "backend:test": "cd backend && npm test",
        "build": "concurrently npm:build:* -c green,blue,magenta",
        "build:backend": "cd backend && npm run build",
        "build:frontend": "cd frontend && npm run build",
        "build:plugins": "cd frontend && npm run build:plugins",
        "clean": "concurrently npm:frontend:clean npm:backend:clean -n frontend,backend -c green,blue",
        "backend:clean": "cd backend && npm run clean",
        "frontend:clean": "cd frontend && npm run clean",
        "update": "npx npm-check-updates --upgrade && npm install && npm run backend:update && npm run frontend:update",
        "backend:update": "cd backend && npm run update",
        "frontend:update": "cd frontend && npm run update",
        "copyright:check": "ts-node --skip-project scripts/copyright-check",
        "copyright:fix": "ts-node --skip-project scripts/copyright-fix",
        "docker:build": "docker build --file Dockerfile.prow --tag console .",
        "docker:build:mce": "docker build --file Dockerfile.mce.prow --tag console-mce .",
        "docker:run": "npm run docker:build && docker run --rm --name console -p 3000:3000 -e PORT=3000 -v $PWD/backend/certs:/app/certs -v $PWD/backend/config:/app/config --env-file=backend/.env console | ./backend/node_modules/.bin/pino-zen -i time && docker rm -f console",
        "docker:deploy": "npm run docker:build && docker tag console quay.io/$USER/console:latest && docker push quay.io/$USER/console:latest && ./scripts/patch-deployment.sh latest quay.io/$USER/console",
        "podman:build": "podman build --file Dockerfile.prow --tag console .",
        "podman:build:mce": "podman build --file Dockerfile.mce.prow --tag console-mce .",
        "podman:run": "npm run podman:build && podman run --rm --name console -p 3000:3000 -e PORT=3000 -v $PWD/backend/certs:/app/certs -v $PWD/backend/config:/app/config --env-file=backend/.env console | ./backend/node_modules/.bin/pino-zen -i time && podman rm -f console",
        "podman:deploy": "npm run podman:build && podman tag console quay.io/$USER/console:latest && podman push quay.io/$USER/console:latest && ./scripts/patch-deployment.sh latest quay.io/$USER/console",
        "setup": "./setup.sh",
        "prepare": "husky install"
    },
    "devDependencies": {
        "@types/node": "14.18.22",
        "concurrently": "7.2.2",
        "husky": "7.0.4",
        "prettier": "2.7.1",
        "ts-node": "10.9.1",
        "typescript": "4.7.4"
    },
    "prettier": {
        "printWidth": 120,
        "tabWidth": 4,
        "semi": false,
        "singleQuote": true
    }
}
